return(P)
}
Perdidas<- c()
Probabilidades_De_Ganar<- c()
for(i in 1:length(N_Jugadores)){
Perdidas[i]<- Perdida_Dado_J(N_Jugadores[i])
Probabilidades_De_Ganar[i]<- Probabilidad_De_Ganar_Dado_J(N_Jugadores[i])
}
data.frame(N_Jugadores=1:12,Probas_de_Ganar=Probabilidades_De_Ganar,
Perdida=Perdidas)
1000.000*0.08333333
Juego_3<-data.frame(N_Jugadores=1:12,Probas_de_Ganar=Probabilidades_De_Ganar,
Perdida=Perdidas)
Juego_3$Probabilidad_De_Perder<- 1-Juego_3$Probas_de_Ganar
Juego_3
1000.000*0.9166667
Juego_3$Perdida_Esperada<- Juego_3$Perdida*Juego_3$Probabilidad_De_Perder
View(Juego_3)
13800074
138000/4
35000*12
10000*24
168+94+31+20+323+61+80
777*22
8.5*(5/10)
8.8*(5/10)
750/24
30*7
210/30
library(xgboost)
´install.packages("xgboost")
install.packages("xgboost")
library(xgboost)
xgb.load("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/Fraudsters_Model.json")
Model=xgb.load("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/Fraudsters_Model.json")
View(Model)
Model.predict()
View(Model)
Model
Model[[1]]
Model[[1]].predict()
Model[[2]].predict()
MOdel
Model
?xgb.load()
Model=xgb.load("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/Fraudsters_Model.model")
View(Model)
Model
Model[1]
class(Model[1])
class(Model[[1]])
class(Model[[2]])
class(Model[[1]])
Model[[1]]
Model[[1]].predict()
Modelo<- Model[[1]]
Modelo
Modelo[1]
Modelo
X_test<- read.csv("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/X_test.csv")
View(X_test)
Model=xgb.load("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/Fraudsters_Model.model")
predict(Model, X_test)
View(X_test)
class(Model[[1]])
class(Model[[2]])
class(Model[[3]])
Modelo<- Model[[1]]
predict(Modelo, X_test)
Modelo<- Model[[1]]
predict(Modelo, X_test)
Modelo<- Model[[2]]
predict(Modelo, X_test)
Model=xgb.load("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/Fraudsters_Model.json")
Model
Model[[1]]
class(Model[[1]])
library(reticulate)
install.packages("reticulate")
library(reticulate)
py_load_object("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/finalized_model.sav")
n
Modelo<-py_load_object("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/finalized_model.sav")
View(Modelo)
class(Modelo)
Modelo[[1]]
Modelo.predict(X_test)
Modelo
Modelo<-py_load_object("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e/finalized_model.sav")
Modelo
Modelo$predict(X_test)
table(Modelo$predict(X_test))
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
## UI
header <- dashboardHeader(title = “Demo Predictor”)
## UI
header <- dashboardHeader(title = "Demo Predictor")
## UI
header <- dashboardHeader(title = "Fraudstesr Model")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Predict!", tabName = "model", icon = icon("bar-chart-o"),
selectInput("cyl",
"Number of Cylinders",
c(4,6,8))
)
)
)
body <- dashboardBody()
ui <- dashboardPage(header,
sidebar,
body)
runApp('Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e')
### Make the back code to do Feature engineering
## The idea is to take the raw data as an Input
## and export a Prediction for each Customer
setwd("/home/salvador/Documents/Rappi_MX/fernandopaulin-rpmx_ds_challenge-9c6f6f0dd29e")
TXN<- read.csv("ds_challenge_apr2021.csv"")
TXN<- read.csv("ds_challenge_apr2021.csv")
TXN<- read.csv("ds_challenge_apr2021.csv")
View(TXN)
TXN$TXN<- 1
names(TXN)
names(X_test)
Approved_TXN<- aggregate(TXN~ID_USER,TXN,sum)
nrow(Approved_TXN)
unique(TXN$status_txn=)
unique(TXN$status_txn)
Approved_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Aceptada"],sum)
Approved_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Aceptada",],sum)
nrow(Approved_TXN)
names(Approved_TXN)
names(Approved_TXN)[2]<- "TXN_Aprobadas"
Declined_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Rechazada",],sum)
names(Declined_TXN)[2]<- "TXN_Declinadas"
In_Process_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="En proceso",],sum)
names(In_Process_TXN)<- "TXN_En_Proceso"
## Add the data
Customers<- merge(Approved_TXN,Declined_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
Customers<- merge(Customers,In_Process_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
names(Customers)
In_Process_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="En proceso",],sum)
names(In_Process_TXN)<- "TXN_En_Proceso"
Customers<- merge(Customers,In_Process_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
names(In_Process_TXN)
In_Process_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="En proceso",],sum)
names(In_Process_TXN)[2]<- "TXN_En_Proceso"
## Add the data
Customers<- merge(Approved_TXN,Declined_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
Customers<- merge(Customers,In_Process_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
names(X_test)
names(TXN)
Categorical_Variables<- c("establecimiento","tipo_tc")
Categorical_Variables<- c("establecimiento","tipo_tc")
TXN$establecimiento
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"Desconocido",
TXN$establecimiento)
table(TXN$establecimiento)
TXN<- read.csv("ds_challenge_apr2021.csv")
unique(TXN$establecimiento)
TXN$establecimiento<- as.character(TXN$establecimiento)
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"Desconocido",
TXN$establecimiento)
table(TXN$establecimiento)
TXN<- read.csv("ds_challenge_apr2021.csv")
TXN$TXN<- 1
unique(TXN$establecimiento)
table(TXN$establecimiento)
table(TXN$establecimiento)[3]
table(TXN$establecimiento)[1]
names(table(TXN$establecimiento))
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento)|TXN$establecimiento)=="N/A"|
TXN$establecimiento==""
is.na(TXN$establecimiento)
TXN$establecimiento<- as.character(TXN$establecimiento)
unique(TXN$establecimiento)
TXN$establecimiento<- as.character(TXN$establecimiento)
unique(TXN$establecimiento9
)
TXN<- read.csv("ds_challenge_apr2021.csv")
TXN$TXN<- 1
unique(as.character(TXN$establecimiento))
TXN$establecimiento<- as.character(TXN$establecimiento)
unique(TXN$establecimiento)
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento)|TXN$establecimiento)%in%c("N/A","")
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"",TXN$establecimiento))
TXN$establecimiento<- ifelse(XN$establecimiento)%in%c("N/A","")
TXN$establecimiento<- ifelse(TXN$establecimiento)%in%c("N/A","")
table(TXN$establecimiento)
TXN<- read.csv("ds_challenge_apr2021.csv")
TXN$TXN<- 1
TXN$establecimiento<- as.character(TXN$establecimiento)
table(TXN$establecimiento)
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"",TXN$establecimiento))
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"",TXN$establecimiento)
table(TXN$establecimiento)
TXN$establecimiento<- ifelse(TXN$establecimiento)%in%c("N/A","")
table(TXN$establecimiento)
TXN<- read.csv("ds_challenge_apr2021.csv")
TXN$TXN<- 1
TXN$establecimiento<- as.character(TXN$establecimiento)
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"",TXN$establecimiento)
TXN$establecimiento<- ifelse(TXN$establecimiento%in%c("N/A",""),"Desconocido",TXN$establecimiento)
table(TXN$establecimiento)
wich.max(table(TXN$establecimiento))
which.max(table(TXN$establecimiento))
names(which.max(table(TXN$establecimiento)))
## Obtaein the most frecuent stablishment for each user
## and his credit line
aggregate(establecimiento~ID_USER,TXN,function(x) names(which.max(table(x))))
## Obtaein the most frecuent stablishment for each user
## and his credit line
Establishment_TXN<-aggregate(establecimiento~ID_USER,TXN,function(x) names(which.max(table(x))))
head(Establishment_TXN)
names(X_test)
Type_card_TXN<-aggregate(tipo_tc~ID_USER,TXN,function(x) names(which.max(table(x))))
Line_Card<- aggregate(linea_tc~ID_USER,TXN,function(x) names(which.max(table(x))))
Customers<- merge(Customers,Establishment_TXN,by="UD_USER",
all.x = TRUE)
names(Establishment_TXN)
Customers<- merge(Customers,Establishment_TXN,by="ID_USER",
all.x = TRUE)
Customers<- merge(Customers,Type_card_TXN,by="ID_USER",
all.x = TRUE)
Customers<- merge(Customers,Line_Card,by="ID_USER",
all.x = TRUE)
names(Customers)
names(X_test)
library(mltools)
library(data.table)
install.packages("mltools")
library(mltools)
library(data.table)
names(Customers)
Categorical_Data<- Customers[,c("establecimiento","tipo_tc")]
as.data.table(Categorical_Data)
newdata <- one_hot(as.data.table(Categorical_Data))
newdata
newdata <- one_hot(as.data.table(Categorical_Data))
newdata
library(reshape2)
install.packages("reshape2")
library(caret)
install.packages("caret")
library(caret)
dummy <- dummyVars(" ~ .", data=Categorical_Data)
newdata <- data.frame(predict(dummy, newdata = Categorical_Data))
newdata
head(newdata)
nrow(newdata)
?dummyVars
dummy <- dummyVars(" ~ .", data=Categorical_Data,sep="_")
newdata <- data.frame(predict(dummy, newdata = Categorical_Data))
names(newdata)
dummy <- dummyVars(" ~ .", data=Categorical_Data)
newdata <- data.frame(predict(dummy, newdata = Categorical_Data))
names(newdata)
names(X_test)
names(newdata)<- c("establecimiento_Abarrotes"  , "establecimiento_Desconocido",
"establecimiento_Farmacia"   , "establecimiento_MPago"  ,     "establecimiento_Restaurante",
"establecimiento_Super"     ,  "tipo_tc_Física"         ,     "tipo_tc_Virtual" )
nrow(cbind(Customers,newdata))
dim(cbind(Customers,newdata))
Customers<- cbind(Customers,newdata)
names(Customers)
names(X_test)
Predictive_Variables<- c("TXN_Aprobadas"        ,       "TXN_Declinadas"       ,       "TXN_En_Proceso" ,
"linea_tc"              ,      "establecimiento_Abarrotes" , "establecimiento_Desconocido",
"establecimiento_Farmacia"   , "establecimiento_MPago"    ,   "establecimiento_Restaurante",
"establecimiento_Super"   ,    "tipo_tc_Física"          ,    "tipo_tc_Virtual")
length(Predictive_Variables)
names(Customer_Variables)
X<-Customers[,Predictive_Variables]
Modelo$predict(X))
Modelo$predict(X)
Modelo$predict(X)
Modelo$predict(X)
apply(X_test,2,class)
apply(X,2,class)
X<- apply(X,2,as.numeric)
Modelo$predict(X)
names(X_test)
Modelo$predict(X_test)
names(X_test)
names(X)
X<-Customers[,Predictive_Variables]
apply(X,2,as.numeric)
X<- as.data.frame(apply(X,2,as.numeric))
names(X)<- Predictive_Variables
Modelo$predict(X_test)
Modelo$predict(X)
table(Modelo$predict(X))
runApp()
Modelo$predict(X)
Customer$Is_Fraudster<- Modelo$predict(X)
Customers$Is_Fraudster<- Modelo$predict(X)
inFile$datapath
runApp()
runApp()
a
runApp()
runApp()
nrow(NULL)
runApp()
runApp()
runApp()
return(Customers)
runApp()
table(Customers$Is_Fraudster)
Customers$Is_Fraudster<- Modelo$predict(X)
Customers$Is_Fraudster
as.data.frame(table(Customers$Is_Fraudster))
runApp()
runApp()
runApp()
runApp()
Base<- read.csv("ds_challenge_apr2021.csv")
TXN<- Base
TXN$TXN<- 1
Approved_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Aceptada",],sum)
names(Approved_TXN)[2]<- "TXN_Aprobadas"
Declined_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Rechazada",],sum)
names(Declined_TXN)[2]<- "TXN_Declinadas"
In_Process_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="En proceso",],sum)
names(In_Process_TXN)[2]<- "TXN_En_Proceso"
## Add the data
Customers<- merge(Approved_TXN,Declined_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
Customers<- merge(Customers,In_Process_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
Categorical_Variables<- c("establecimiento","tipo_tc")
TXN$establecimiento<- as.character(TXN$establecimiento)
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"",TXN$establecimiento)
TXN$establecimiento<- ifelse(TXN$establecimiento%in%c("N/A",""),"Desconocido",TXN$establecimiento)
## Obtaein the most frecuent stablishment for each user
## and his credit line
Establishment_TXN<-aggregate(establecimiento~ID_USER,TXN,function(x) names(which.max(table(x))))
Type_card_TXN<-aggregate(tipo_tc~ID_USER,TXN,function(x) names(which.max(table(x))))
Line_Card<- aggregate(linea_tc~ID_USER,TXN,function(x) names(which.max(table(x))))
Customers<- merge(Customers,Establishment_TXN,by="ID_USER",
all.x = TRUE)
Customers<- merge(Customers,Type_card_TXN,by="ID_USER",
all.x = TRUE)
Customers<- merge(Customers,Line_Card,by="ID_USER",
all.x = TRUE)
Categorical_Data<- Customers[,c("establecimiento","tipo_tc")]
newdata <- one_hot(as.data.table(Categorical_Data))
dummy <- dummyVars(" ~ .", data=Categorical_Data)
newdata <- data.frame(predict(dummy, newdata = Categorical_Data))
names(newdata)<- c("establecimiento_Abarrotes"  , "establecimiento_Desconocido",
"establecimiento_Farmacia"   , "establecimiento_MPago"  ,     "establecimiento_Restaurante",
"establecimiento_Super"     ,  "tipo_tc_Física"         ,     "tipo_tc_Virtual" )
Customers<- cbind(Customers,newdata)
Predictive_Variables<- c("TXN_Aprobadas"        ,       "TXN_Declinadas"       ,       "TXN_En_Proceso" ,
"linea_tc"              ,      "establecimiento_Abarrotes" , "establecimiento_Desconocido",
"establecimiento_Farmacia"   , "establecimiento_MPago"    ,   "establecimiento_Restaurante",
"establecimiento_Super"   ,    "tipo_tc_Física"          ,    "tipo_tc_Virtual")
X<-Customers[,Predictive_Variables]
X<- as.data.frame(apply(X,2,as.numeric))
names(X)<- Predictive_Variables
Customers$Is_Fraudster<- Modelo$predict(X)
head(Customers)
TXN<- read.csv("ds_challenge_apr2021.csv")
TXN$TXN<- 1
Approved_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Aceptada",],sum)
names(Approved_TXN)[2]<- "TXN_Aprobadas"
Declined_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="Rechazada",],sum)
names(Declined_TXN)[2]<- "TXN_Declinadas"
In_Process_TXN<- aggregate(TXN~ID_USER,TXN[TXN$status_txn=="En proceso",],sum)
names(In_Process_TXN)[2]<- "TXN_En_Proceso"
## Add the data
Customers<- merge(Approved_TXN,Declined_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
Customers<- merge(Customers,In_Process_TXN,by="ID_USER",
all.x = TRUE,all.y = TRUE)
Customers
names(Customers)
Customers[,c( "TXN_Aprobadas" ,"TXN_Declinadas" ,"TXN_En_Proceso")]<-
apply(Customers[,c( "TXN_Aprobadas" ,"TXN_Declinadas" ,"TXN_En_Proceso")],2,function(x) ifelse(is.na(x),0,x))
Customers
Categorical_Variables<- c("establecimiento","tipo_tc")
TXN$establecimiento<- as.character(TXN$establecimiento)
TXN$establecimiento<- ifelse(is.na(TXN$establecimiento),"",TXN$establecimiento)
TXN$establecimiento<- ifelse(TXN$establecimiento%in%c("N/A",""),"Desconocido",TXN$establecimiento)
## Obtaein the most frecuent stablishment for each user
## and his credit line
Establishment_TXN<-aggregate(establecimiento~ID_USER,TXN,function(x) names(which.max(table(x))))
Type_card_TXN<-aggregate(tipo_tc~ID_USER,TXN,function(x) names(which.max(table(x))))
Line_Card<- aggregate(linea_tc~ID_USER,TXN,function(x) names(which.max(table(x))))
Customers<- merge(Customers,Establishment_TXN,by="ID_USER",
all.x = TRUE)
Customers<- merge(Customers,Type_card_TXN,by="ID_USER",
all.x = TRUE)
Customers<- merge(Customers,Line_Card,by="ID_USER",
all.x = TRUE)
Categorical_Data<- Customers[,c("establecimiento","tipo_tc")]
library(mltools)
library(data.table)
library(reshape2)
library(caret)
newdata <- one_hot(as.data.table(Categorical_Data))
dummy <- dummyVars(" ~ .", data=Categorical_Data)
newdata <- data.frame(predict(dummy, newdata = Categorical_Data))
names(newdata)<- c("establecimiento_Abarrotes"  , "establecimiento_Desconocido",
"establecimiento_Farmacia"   , "establecimiento_MPago"  ,     "establecimiento_Restaurante",
"establecimiento_Super"     ,  "tipo_tc_Física"         ,     "tipo_tc_Virtual" )
Customers<- cbind(Customers,newdata)
Predictive_Variables<- c("TXN_Aprobadas"        ,       "TXN_Declinadas"       ,       "TXN_En_Proceso" ,
"linea_tc"              ,      "establecimiento_Abarrotes" , "establecimiento_Desconocido",
"establecimiento_Farmacia"   , "establecimiento_MPago"    ,   "establecimiento_Restaurante",
"establecimiento_Super"   ,    "tipo_tc_Física"          ,    "tipo_tc_Virtual")
X<-Customers[,Predictive_Variables]
X<- as.data.frame(apply(X,2,as.numeric))
names(X)<- Predictive_Variables
Customers$Is_Fraudster<- Modelo$predict(X)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
90+30
140+30
170+40
runApp()
runApp()
runApp()
runApp()
as.data.frame(table(Customer()$Is_Fraudster))
as.data.frame(table(Customer$Is_Fraudster))
as.data.frame(table(Customers$Is_Fraudster))
Count<-as.data.frame(table(Customers$Is_Fraudster))
row.names(Count)
row.names(Count)<- c("Non Fraudster","Fraudster")
Count
names(Count)<- c("Is_Fraudster","Universe")
Count
Count["Fraudster",]
Count["Fraudster","Universe"]
runApp()
Count<- as.data.frame(table(Customers()$Is_Fraudster))
Count<- as.data.frame(table(Customers$Is_Fraudster))
names(Count)<- c("Is_Fraudster","Universe")
Count$Is_Fraudster<- c("Non Fraudster","Fraudster")
Count
library(plotly)
install.packages("plotly")
library(plotly)
Count
plot_ly(Count, x = ~Is_Fraudster , y = ~Universe, type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
plot_ly(Count, x = ~Is_Fraudster , y = ~Universe, type = 'bar',
text = Is_Fraudster, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
plot_ly(Count, x = ~Is_Fraudster , y = ~Universe, type = 'bar',
text = ~Is_Fraudster, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
plot_ly(Count, x = ~Is_Fraudster , y = ~Universe, type = 'bar',
text = ~Is_Fraudster, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = '#00704a', width = 1.5)))
plot_ly(Count, x = ~Is_Fraudster , y = ~Universe, type = 'bar',
text = ~Is_Fraudster, textposition = 'auto',
marker = list(color = '#FC9186',
line = list(color = '#FC9186', width = 1.5)))
fig <- plot_ly(Count, x = ~Is_Fraudster , y = ~Universe, type = 'bar',
text = ~Is_Fraudster, textposition = 'auto',
marker = list(color = '#FC9186',
line = list(color = '#FC9186', width = 1.5)))
fig <- fig %>% layout(title = "Universes",
xaxis = list(title = ""),
yaxis = list(title = ""))
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textOutput
runApp()
?h2
?h2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyFiles)
install.packages("shinyFiles")
library(shinydashboard)
library(shinyFiles)
